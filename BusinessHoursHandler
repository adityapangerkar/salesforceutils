public class BusinessHoursHandler {
    @InvocableMethod
    public static void processBusinessHours(List<InputWrapper> inputParams) {
        try {
            if (inputParams == null || inputParams.isEmpty()) {
                return;
            }
            List<BusinessHours> businessHoursList = [SELECT Id FROM BusinessHours WHERE Name =: inputParams[0].businessHoursName LIMIT 1];
            if (businessHoursList.isEmpty()) {
                return;
            }
            DateTime resultDateTime;
            if (inputParams[0].timeDuration != null) {
                resultDateTime = BusinessHours.add(businessHoursList[0].Id, System.now(), inputParams[0].timeDuration);
            } else {
                resultDateTime = BusinessHours.nextStartDate(businessHoursList[0].Id, System.now());
            }
            SObjectType sObjectType = inputParams[0].recordId.getSObjectType();
            SObject sObjectInstance = sObjectType.newSObject();
            sObjectInstance.put('Id', inputParams[0].recordId);
            sObjectInstance.put(inputParams[0].fieldApiName, resultDateTime);
            update sObjectInstance;
        } catch (Exception e) {
            System.debug('Error in BusinessHoursHandler: ' + e.getMessage());
        }
    }

    public class InputWrapper {
        @InvocableVariable(required = true)
        public String businessHoursName;
        @InvocableVariable(required = true)
        public Id recordId;
        @InvocableVariable(required = true)
        public String fieldApiName;
        @InvocableVariable(Description = 'Time duration (in milliseconds) to be added to the current time based on business hours. If left blank, the field is updated to the next business hours start time.')
        public Long timeDuration;
    }
}
